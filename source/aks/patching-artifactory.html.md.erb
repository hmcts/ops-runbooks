---
title: Artifactory Patching
weight: 30
last_reviewed_on: 2024-06-06
review_in: 12 months
---

# <%= current_page.data.title %>

Artifactory is utilized in the context of managing and updating software dependencies and configurations within a Kubernetes environment.

The steps below will show you how to check and update **self-hosted version** of Artifactory being used. This process involves accessing [Artifactory's website](https://jfrog.com/help/r/jfrog-release-information/artifactory-release-notes) to determine the latest version available.

Before applying the patch on the PTL environment, testing is conducted in PTLSBOX environment. This involves raising a PR to the [Artifactory repo](https://github.com/hmcts/cnp-flux-config) containing configuration files, creating `artifactory-sbox.yaml` file and editing `kustomization.yaml` files with your changes later in the documentation. In addition, verifying that the Artifactory pods are healthy and access to [Artifcatory](https://artifactory.sandbox.platform.hmcts.net/ui/repos/tree/General/hmcts) is available.

If any issues arise during the update process, troubleshooting steps are provided at the bottom of this page. These steps involve identifying and resolving any errors or conflicts that may occur, such as missing namespaces or configuration discrepancies.

## Artifactory Patching Process

### 1. Updating CFT PTLSBOX

  • [Connect to PTLSBOX cluster](https://hmcts.github.io/cloud-native-platform/troubleshooting/index.html#connecting-to-aks-clusters)

  • Create a new file named `artifactory-sbox.yaml` in the [artifactory directory](https://github.com/hmcts/cnp-flux-config/tree/master/apps/artifactory/artifactory), add the following and update to the latest version.

  ```yaml
  apiVersion: helm.toolkit.fluxcd.io/v2
  kind: HelmRelease
  metadata:
    name: artifactory-oss
    namespace: artifactory
  spec:
    chart:
        spec:
          chart: artifactory-oss
          version: 107.90.9 <- update to latest version
  ```

  **Note:** The layout of Artifactory versioning includes 10 at the beginning. This version would be `7.90.9`

  • Make the changes to the bottom of `kustomization.yaml` file found in [sbox-intsvc directory](https://github.com/hmcts/cnp-flux-config/blob/master/apps/artifactory/sbox-intsvc/base/kustomization.yaml).

  ```yaml
  ...

  patchesStrategicMerge:
    - ../../artifactory/artifactory-sbox.yaml
  ```

  • Submit your PR and ensure it gets reviewed and merged.

### 2. Check new version on CFT PTLSBOX
  
  • Run the following commands ensuring pods are **healthy** and has applied new version. **Note** version number found at "artifactory-oss".

  • Ensure you can access [Artifacory](https://artifactory.sandbox.platform.hmcts.net/ui/repos/tree/General/hmcts) website. **Note** you will need to be connected to F5 VPN to access this link.

  ```command
  kubectl get pods -n artifactory
  ```

  ```command
  kubectl describe pods -n artifactory artifactory-oss-0
  ```

### 3. Update CFT PTL
  
  • [Connect to PTL cluster](https://hmcts.github.io/cloud-native-platform/troubleshooting/index.html#connecting-to-aks-clusters)

  • Remove 'artifactory-sbox.yaml' file and its corresponding code from kustomization.yaml.

  • Update the version in 'artifactory.yaml' to latest version eg, (7.84.12).

  ```command
        containers:
          - image: docker.bintray.io/jfrog/artifactory-oss:7.84.12
            name: artifactory-oss
  ```
  
  • Raise a PR similar to the [Example](https://github.com/hmcts/cnp-flux-config/pull/32191/files) and get your PR approved and merged.
  
  • Repeat [step 2](#2-check-new-version-on-cft-ptlsbox) checking the new version on CFT PTL ensuring the pods are healthy.

### Related Links
  
  [GitHub repo](https://github.com/hmcts/cnp-flux-config)
  
  [Artifactory](https://artifactory.sandbox.platform.hmcts.net/ui/repos/tree/General/hmcts) **Note** you will need to be connected to F5 VPN to access this link.

  [Artifactory Release Information](https://jfrog.com/help/r/jfrog-release-information/artifactory-release-notes)
kubectl get pods -A | wc -l > pods_total_count && kubectl get pods -A > pods_all_status && kubectl get pods -A | awk '!/(Running|Succeeded|Completed)/' > pods_not_running_or_succeeded && kubectl get hr -A > hr_all_status && kubectl get pdb -A > pdb_status && kubectl get hr --all-namespaces | awk '/(Unknown|False)/' > hr_failed_status