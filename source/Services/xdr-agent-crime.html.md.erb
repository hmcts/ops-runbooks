---
title: XDR Agent Installation - Crime
last_reviewed_on: 2024-11-19
review_in: 12 months
weight: 156
---

# <%= current_page.data.title %>

We have developed a method of installing the XDR agent to Crime VMs. This differs from the HMCTS install method which utilised the VM Extension capability on Azure VMs and is delivered via Terraform.

For Crime, we are utilising Ansible as the delivery method and have developed an Ansible Role which will perform the installation.

To trigger the Ansible, we have created two pipelines in the main Crime Jenkins instance which can be scope limited by Ansible's Limit functionality. This enables us to follow a rollout plan through environments and safely stage our delivery.

When the deploy pipeline is run, this calls an Ansible playbook that includes a Role we have developed which handles the installation.

This document details the procedure to do this.



## Ansible Inventory/Variables

Before running the pipelines, two variables need declaring in either Ansible group_vars or host_vars. These are:

- cortex_env
- xdr_tags

cortex_env is a string which needs set to either 'nonprod' or 'prod'. MoJ SoC provided a separate installation package for nonprod & prod, this defines which installation package is used.

xdr_tags is a comma-separated string of tags to provide to the Cortex Agent.

Example:

```bash
xdr_tags: "hmcts,server,idam"
cortex_env: "nonprod"
```

An MS Team channel exists called "HMCTS - Tagging Catch Up" with the MoJ SoC team as members. Please reach out for help if unsure on tags on VMs.

### Where to set these?

These need setting in the automation.ansible repository. The vars live at /sp-ansible/group_vars & /sp-ansible/host_vars. Information on Ansible variables is available in the [official documentation](https://docs.ansible.com/archive/ansible/2.3/intro_inventory.html).

Its possible the level at which you wish to set these variables doesn't have a pre-exisiting vars file. e.g. there may not be a host_vars/X file for your host or a group_vars/X file for the group level. If you find this, create the necessary vars file.


### Other Role variables

Other variables are defaulted within the Role and do not need setting in automation.ansible repo inventory. The only exception to this is 'sa_key'. This has been set on the 'all' group and is already usable by all hosts.


## Deploying the XDR agents

### Pipelines

The pipelines in Jenkins for deployment are:

- xdr-ansible-inventory
- xdr-ansible-deploy

xdr-ansible-deploy is the pipeline which does the actual installation. xdr-ansible-inventory queries Azure and brings back JSON data used to populate the parameter options for xdr-ansible-deploy.

xdr-ansible-inventory is set on a schedule to run each morning and update its backend JSON data. This schedule should be enough to ensure groups and host parameter options are up-to-date with Azure. 

```
Caveat: If new VMs are deployed during the day and the rollout plan after this, the new VMs will not be included in the parameter option list. This isn't likely as new VMs are rarely deployed. If they are the pipeline can be re-run ad-hoc without issue to get the latest data. Make sure this is only run when xdr-ansible-deploy is NOT running! 
```


### Using the Pipelines

If you choose to, run the xdr-ansible-inventory pipeline first. There are no build parameters to this, simply click 'Build now'.

<img src="images/xdrCrimeInventory.png" style="width:600px;">

---

Run the xdr-ansible-deploy pipeline, click 'Build with Parameters'. Only run this when xdr-ansible-inventory pipeline has completed.

<img src="images/xdrCrimeDeploy.png" style="width:600px;">

<img src="images/xdrCrimeDeployParams.png" style="width:600px;">

The parameters are reactive and will update based on the Subscription & Limit dropdown selection.

Select the subscription which contains the target VMs. Then select the chosen limit scope. When the Limit selection is chosen, the corresponding Group, ResourceGroup or Host dropdowns will populate.

Alternatively, choose Limit type of Custom Limit and provide a custom limit. Be careful with this and formulate your ansible limit correctly. Information on how Ansible limiting is available in the [official documentation](https://docs.ansible.com/archive/ansible/2.3/intro_patterns.html).

Click 'Build' and the pipeline will run with the chosen Limit. Failure is possible, please review any error output thoroughly. This is likely to be caused by authentication/sudo escalation issues which will need resolving between PlatOps/the application team.


## How it works

### Pipeline Design

xdr-ansible-inventory saves JSON data locally on the master Jenkins server. It saves the files in:

```
/var/lib/jenkins/data/azure-inventory/
```

xdr-ansible-deploy reads one of the JSON files (one per subscription for nonlive & live) based on the selection of the Subscription dropdown. The Group, ResourceGroup & Host dropdown boxes are Jenkins Active Choices Reactive Parameter type from the Active Choices Jenkins plugin. 

'Reactive' refers to its capability to dynamically update based on another input selection. 'Active' refers to the capability to programatically return choices based on the output of a groovy script. All these parameters read the appropriate JSON file and applies filtering to populate itself correctly.


### Jenkins

Crime have multiple Jenkins instances, some are application specific (such as build-idam) and these live as deployments in AKS. The main PlatOps Jenkins is deployed as a VM (active & standby pairing) & seperate instances exist for non-live & live:

- build[.]mdv[.]cpp[.]nonlive
- build[.]mdv[.]cpp[.]live

The Jenkinsfile pipeline script of xdr-ansible-deploy is set to run on the Master Jenkins server and not a jenkins slave. This is by design.


### The Role

All installation code is contained within the Role. The playbook xdr-ansible-deploy executes only calls the Role. The Role code is seperated into its [own repository](https://github.com/hmcts/cpp-ansible-role-xdr-agent-install)

The Role makes use of the same Shared Access Signature token used in the HMCTS XDR install process for HMCTS. azcopy is installed and used to retrieve the installation package & config from [cftptlintsvc](https://portal.azure.com/#@HMCTS.NET/resource/subscriptions/1baf5470-1c3e-40d3-a6f7-74bfbce4b348/resourceGroups/core-infra-intsvc-rg/providers/Microsoft.Storage/storageAccounts/cftptlintsvc/overview) storage account under the xdr-collectors blob.

The SAS token itself is stored in Vault and Ansible's Vault lookup plugin is used to fetch this value.

The Role has the ability to update tag information in-place. Simply update xdr_tags variable and re-run the xdr-ansible-deploy pipeline.


### Verify Installation

Verify installation in the Cortex XSIAM Portal. Certain PlatOps members have access (Rees, Chirag, Jordan H). This can also be confirmed by MOJ SoC Engineers in the MS Teams chat.

Verification can also be made on the VM itself.

```bash
rpm -qa | grep -i cortex-agent
```

<img src="images/xdr-linux.png" style="width:600px;">

To check the agent is running on the VM:

```bash
systemctl status traps_pmd.service
```


### Uninstall

If required, uninstall the XDR agent by doing the following:

Verify agent is installed

```bash
rpm -qa | grep -i cortex-agent
```

If installed, run the rpm erase command

```bash
rpm -e cortex-agent
```

If this fails to work, specify the full version (this will have been output from the first command).

For example

```bash
rpm â€”e cortex-agent-8.5.0.125392-1.x86_64
```

This will automatically remove the VM from the [XSIAM Cortex portal](https://justiceuk.xdr.uk.paloaltonetworks.com/login)

[Detailed documentation](https://docs-cortex.paloaltonetworks.com/r/Cortex-XDR/8.4/Cortex-XDR-Agent-Administrator-Guide/Uninstall-the-Cortex-XDR-Agent-for-Linux).


## Developing the Role

We have created a [test environment repo](https://github.com/hmcts/cpp-ansible-test-environment/) which mimics the python & ansible setup used in Crime's automation.ansible repository. 

This repository contains Ansible code which delivers os-level customisation to VMs for PlatOps such as installing the Dynatrace one-agent agent.

The README details how to setup a local machine environment for development that is compatible with the automation.ansible repo. It uses Vagrant & the Virtualbox driver to build a local VM and automate Ansible against it.


## Troubleshooting

Put troubleshooting info here as needed