---
title: Tenable Nessus
last_reviewed_on: 2024-01-26
review_in: 12 months
weight: 200
---
# <%= current_page.data.title %>

Tenable Nessus is a proprietary vulnerability scanner developed by Tenable. The scanner allows the security team
to scan devices and check them against the nessus database that contains thousands of known vulnerabilities
and patch them before they are exploited. There are three components to the tenable setup, the server, scanners
and the agents. This runbook will cover the following

- Tenable environments 
- Deploying agents
- Verifying agent installation. 

This runbook does not cover the finer details of the Terraform bootstrap module.

## Environments

There are three environments, Prod, Non-Prod and Sbox, the non-prod VM scalesets reside within the prod 
resource group.

### Production and Non-Production 

<b>Subscription:</b> HMCTS-SOC-PROD

<b>Resource Group:</b> soc-tenable-prod-rg

<b>server:</b> tenable-sc-prod-vm00

<b>VM ScaleSets:</b> nessus-scanners-prod / nessus-scanners-nonprod

### Sbox

<b>Subscription:</b> soc-tenable-sbox-rg

<b>Resource Group:</b> HMCTS-SOC-SBOX

<b>server:</b> tenable-sc-sbox-vm00

<b>VM ScaleSets:</b> nessus-scanners-sbox

## Deploying Agents

The agent is deployed using terraform bootstrap module  [terraform-module-vm-bootstrap](https://github.com/hmcts/terraform-module-vm-bootstrap). The module is designed to install to Linux and Windows machines.

> The example given below is specific to the Heritage environment.

#### Steps to setup deployment

- Call the terraform-bootstrap-module from the [terraform-module-vm-bootstrap](https://github.com/hmcts/terraform-module-vm-bootstrap)

```terraform
module "vm-bootstrap" {
  count  = var.install_splunk_uf == true || var.nessus_install == true ? var.vm_count : 0
  source = "git::https://github.com/hmcts/terraform-module-vm-bootstrap.git?ref=master"

  virtual_machine_type         = "vm"
  virtual_machine_id           = azurerm_virtual_machine.general_purpose_vm[count.index].id
  os_type                      = local.os_type
  nessus_server                = var.nessus_server
  nessus_key                   = var.nessus_key
  nessus_groups                = var.nessus_groups
  install_dynatrace_oneagent   = false
  install_azure_monitor        = false
}
```

- Add all the required variables 

```terraform
variable "nessus_install" {
default = false
}

variable "nessus_server" {}

variable "nessus_key_name" {
default = null
}

variable "nessus_groups" {
default = null
}

data "azurerm_key_vault_secret" "nessus_key" {
count    = var.nessus_install ? 1 : 0
provider = azurerm.soc

name         = var.nessus_key_name
key_vault_id = data.azurerm_key_vault.soc_vault[0].id
}
```

- Run associated Heritage VM [pipeline](https://dev.azure.com/hmcts/PlatformOperations/_build?definitionId=433) on Azure DevOps


## Verifying Agent Installation

After deployment of the Nessus agent, it will register with the Nessus Manager host inside to the appropriate agent group.

> Permissions for PlatOps to access the Nessus Manager is currently being setup by SecOps; until access is enabled, they will confirm the node in the console to validate agent installation and 
> configuration, please contact Ian Knight from SecOps to verify that the agent can be seen on the Tenable Server.



#### Connect to the Tenable Server 

- Ensure you have JIT access and you are connected to the VPN 
- Get the SSH config from Azure (valid for 1 hour)

```bash
az ssh config --resource-group bastion-prod-rg --vm-name bastion-prod --prefer-private-ip --file ./sshconfig Paste into ~/.ssh/config
```

- Start port-forwarding/SSH tunnel to Nessus host. To port forward to the Tenable Server, run the following command replacing the variable with the intended IP. 

```bash
ssh -L 5000:<VM-PRIVATE-IP>:8834 bastion-prod-rg-bastion-prod
```

- Go to browser https://localhost:5000

## Troubleshooting Agents

### Prerequisites

* Enable JIT access to non-prod or Production Bastion, you can do that [here](https://myaccess.microsoft.com/).
* Connect to [F5](https://portal.platform.hmcts.net).

### Linux Agents 

Check if the agent has deployed correctly

```bash
systemctl status 
```

Remove agent from server

```bash
rpm -qa | grep -i NessusAgent
```

```bash
rpm -e NessusAgent-10.1.3-es7.x86_64
```

### Windows Agents 

Commands to check Machine connectivity
```
tnc nessus-scanners-nonprod000005.platform.hmcts.net
```

```
tnc -port 8834 nessus-scanners-nonprod000005.platform.hmcts.net
```

Nessus Link commands

Open CMD as an Admin

```
Cd into C:\Program Files\Tenable\Nessus Agent
```

Check if the agent is linked to a scanner with the command below 

```
nessuscli agent status
```

You should see a response similar to output below 

```
C:\Program Files\Tenable\Nessus Agent>nessuscli agent status
Running: Yes
Linked to: nessus-scanners-nonprod000005.platform.hmcts.net:8834
Link status: Connected to nessus-scanners-nonprod000005.platform.hmcts.net:8834
Last successful connection with controller: 10 secs ago
Proxy: None
Plugin set: (null)
Scanning: No (0 jobs pending, 0 smart scan configs)
Scans run today: 0 of 10 limit
Last scanned: Never
Last connect: 1655998378
Last connection attempt: 1655998378
```


## Important links

* https://docs.tenable.com/nessus/Content/NessusCLIAgent.htm#Nessuscli-Commands

* https://docs.tenable.com/nessus/Content/RemoveNessusAgentLinux.htm 

## Security Center SSL

Tenables Security Center is hosted on a VM in Azure using a marketplace image published by Tenable. The VM is configured out of the box with a self signed certificate. This is not ideal and should use either a Lets Encrypt or Gandi certificate.

Tenable Security Center also sits behind App Proxy. If Security Center is not presenting a valid certificate App Proxy will fail to validate the cert and the user will not be able to access Security Center.

### Updating the SSL Certificate

Generate a new certificate using Lets Encrypt or Gandi. Security Center needs the certificate in a .crt and .key format. If you are retrieving the cert from an Azure KeyVault it will most likely be a single .pfx file which contains both the cert and the key.

To convert the .pfx file to a .crt and .key file use the following commands:

```bash
# Extract the private key, you will be prompted to enter a password.
openssl pkcs12 -in your-certificate-and-key-combined.pfx -nocerts -out keyfile.key
# Decrypt the key, you will be prompted to enter a password, this is the password you entered in the previous step.
openssl rsa -in keyfile.key -out SecurityCenter.key
# Extract the certificate
openssl pkcs12 -in your-certificate-and-key-combined.pfx -clcerts -nokeys -out SecurityCenter.crt
```

Once you have the .crt and .key files you can upload them to the Security Center VM. The files should be placed in the `/opt/sc/support/conf` directory.
Both the .crt and .key files should be owned by the `tns` user and group and have 0640 permissions.

```bash
chown tns:tns /opt/sc/support/conf/SecurityCenter.crt
chown tns:tns /opt/sc/support/conf/SecurityCenter.key
chmod 640 /opt/sc/support/conf/SecurityCenter.crt
chmod 640 /opt/sc/support/conf/SecurityCenter.key
```

Restart the Security Center service to apply the new certificate.

```bash
systemctl restart SecurityCenter
```
